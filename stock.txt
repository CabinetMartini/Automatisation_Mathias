""" from pdfquery import PDFQuery

pdf = PDFQuery("sample.pdf")
pdf.load()

label = pdf.pq('LTTextLineHorizontal')

text = [t.text for t in label]

print(text+['\n']) """
""" import PyPDF2

with open('sample.pdf', 'rb') as pdf_file:
    reader = PyPDF2.PdfReader(pdf_file)

    # Get the total number of pages
    total_pages = len(reader.pages)
    print(f"Total pages: {total_pages}")

    # Read the content of the first page
    first_page = reader.pages[0]
    text = first_page.extract_text()
    print(text)
 """

""" import pdfplumber
import pandas as pd

def extract(path):
    total_tables = []

    with pdfplumber.open(path) as pdf:
        for page in pdf.pages:
            tables = page.extract_tables()
            for table in tables:
                df = pd.DataFrame(table)
                total_tables.append(df)
    return total_tables

path = "sample.pdf"
tables = extract(path)
for i, table in enumerate(tables):
    print(f"\nüìå Tableau {i+1}:")
    print(table)

    # Optionnel : Exporter en CSV
    table.to_csv(f"tableau_{i+1}.csv", index=False) """

""" import pdfplumber
import pandas as pd

def extract_first_table(pdf_path):

    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            tables = page.extract_tables()
            
            if tables:
                df = pd.DataFrame(tables[1])

                # üìå Suppression des colonnes contenant plus de 80% de None
                df = df.dropna(axis=1, thresh=len(df) * 0.2)  # Supprime les colonnes presque vides

                # üìå Suppression des lignes totalement vides
                df = df.dropna(axis=0, how="all")

                # üìå Suppression des espaces vides dans les cellules
                df = df.map(lambda x: x.strip() if isinstance(x, str) else x)

                # üìå V√©rifier la structure du tableau apr√®s nettoyage
                print(f"\nüìä Tableau apr√®s suppression des colonnes inutiles :\n{df.head()}")

                # üìå Si la premi√®re ligne contient des noms de colonnes, l'utiliser
                if all(isinstance(x, str) and len(x) > 0 for x in df.iloc[0]):
                    df.columns = df.iloc[0]  # Prendre la premi√®re ligne comme en-t√™tes
                    df = df[1:].reset_index(drop=True)  # Supprimer la premi√®re ligne utilis√©e comme colonnes

                # üìå V√©rification du nombre de colonnes apr√®s r√©organisation
                print(f"\n‚úÖ Nombre de colonnes apr√®s nettoyage : {len(df.columns)}")

                # üìå Essayer de d√©tecter automatiquement les colonnes utiles
                expected_columns = ["Cat√©gorie", "TAC", "NET", "%", "P.M."]
                df.columns = expected_columns[:len(df.columns)]  # Adapter dynamiquement

                # üìå Conversion automatique des valeurs num√©riques
                for col in ["TAC", "NET", "P.M."]:
                    if col in df.columns:
                        df[col] = pd.to_numeric(df[col], errors='coerce')

                # üìå V√©rification finale du tableau propre
                print(f"\nüìä Tableau final propre :\n{df.head()}")

                return df

    return None

def extract_specific_values(df):

    try:
        print("\n‚úÖ Colonnes d√©tect√©es :", df.columns.tolist())  # V√©rification des colonnes

        # V√©rifier si "Cat√©gorie" existe bien
        if "Cat√©gorie" in df.columns:
            net_total = df[df["Cat√©gorie"].str.contains("TOTAL", na=False)]["NET"].values[0]
            pm_kiosk_emporter = df[df["Cat√©gorie"].str.contains("Kiosk √† emporter", na=False)]["P.M."].values[0]
        else:
            raise KeyError("La colonne 'Cat√©gorie' n'a pas √©t√© d√©tect√©e correctement.")

        print(f"\nüìå Valeur NET de TOTAL : {net_total}")
        print(f"üìå Valeur P.M. de Kiosk √† emporter : {pm_kiosk_emporter}")

        return {
            "NET_TOTAL": net_total,
            "PM_KIOSK_A_EMPORTER": pm_kiosk_emporter
        }
    except IndexError:
        print("\n‚ö†Ô∏è Impossible de trouver certaines valeurs sp√©cifiques.")
        return {}

# üìå Chemin du fichier PDF
pdf_path = "sample.pdf"

# üìå Extraction du tableau
df_table = extract_first_table(pdf_path)

if df_table is not None:
    print("\n‚úÖ Premier tableau extrait avec succ√®s !")

    # üìå Extraire les valeurs sp√©cifiques
    specific_values = extract_specific_values(df_table)

    # üìå Sauvegarde des valeurs sp√©cifiques
    df_values = pd.DataFrame([specific_values])
    df_values.to_csv("valeurs_specifiques.csv", index=False)
    print("\n‚úÖ Fichier CSV enregistr√© : valeurs_specifiques.csv")
else:
    print("\n‚ùå Aucun tableau trouv√© dans le PDF.")


import pdfplumber
import re
import pandas as pd

def extraire_donnees_tableau(chemin_pdf):

    resultats = {}
    
    with pdfplumber.open(chemin_pdf) as pdf:
        for i, page in enumerate(pdf.pages):
            print(f"Page {i+1}")
            # Extraire tout le texte de la page
            texte = page.extract_text()
            #print(f"Texte de la page{i+1}, {texte}")
            # Diviser le texte en lignes
            lignes = texte.split("\n")
            
            # Parcourir chaque ligne pour trouver les donn√©es pertinentes
            for ligne in lignes:
                # Chercher les lignes qui correspondent √† nos cat√©gories d'int√©r√™t
                for categorie in ["Sur place", "A emporter", "McDrive", "TOTAL", "McCaf√©", "Kiosk"]:
                    if categorie in ligne:
                        # Utiliser une expression r√©guli√®re pour extraire les valeurs num√©riques
                        pattern = r"(\b[A-Za-z√©√†√®√™√´√Ø\s\.]+\b)\s+(\d+(?:\.\d+)?)\s+(\d+(?:\.\d+)?)\s+(\d+(?:\.\d+)?\s*%?)\s+(\d+(?:\.\d+)?)"
                        match = re.search(pattern, ligne)
                        
                        if match:
                            cat, tac, net, pourcentage, pm = match.groups()
                            resultats[cat.strip()] = {
                                'TAC': tac,
                                'NET': net,
                                'Pourcentage': pourcentage,
                                'P.M.': pm
                            }
                        else:
                            # Si le pattern ne correspond pas, essayons de d√©couper manuellement
                            parts = re.split(r'\s{2,}', ligne)
                            if len(parts) >= 5:  # Assurez-vous d'avoir suffisamment de parties
                                cat = parts[0].strip()
                                numbers = [p for p in parts[1:] if re.search(r'\d', p)]
                                if len(numbers) >= 4:
                                    resultats[cat] = {
                                        'TAC': numbers[0],
                                        'NET': numbers[1],
                                        'Pourcentage': numbers[2],
                                        'P.M.': numbers[3]
                                    }
    
    return resultats

# Utilisation
if __name__ == "__main__":
    # Essayer les deux approches
    print("=== Approche 1 ===")
    resultats1 = extraire_donnees_tableau("sample.pdf")
    print(resultats1)
    print("\n Test 1 : ", resultats1["Sur place"])
    print("\n Test 2 : ", resultats1["Sur place"]["TAC"])
"""






import pdfplumber
import re
import pandas as pd

def extraire_tableau_mcdo(chemin_pdf):
    """
    Fonction sp√©cialis√©e pour extraire les donn√©es TAC et P.M. des tableaux 
    de ventes McDonald's.
    
    Cette fonction est optimis√©e pour la structure sp√©cifique observ√©e
    dans l'exemple fourni.
    """
    # Structure attendue des donn√©es √† extraire
    categories = [
        "Sur place", 
        "A emporter", 
        "McDrive", 
        "TOTAL",
        "McCaf√© sur place",
        "McCaf√© √† emporter",
        "TOTAL McCaf√©",
        "Kiosk sur place", 
        "Kiosk √† emporter", 
        "TOTAL Kiosk",
        "TOTAL"
    ]
    
    # Initialiser le dictionnaire de r√©sultats
    resultats = {}
    
    with pdfplumber.open(chemin_pdf) as pdf:
        for i, page in enumerate(pdf.pages):
            # Extraire le texte de la page
            texte = page.extract_text()
            lignes = texte.split('\n')
            
            # Pour un d√©bogage approfondi, sauvegarder le texte extrait
            with open(f"texte_page_{i}.txt", "w", encoding="utf-8") as f:
                f.write(texte)
            
            # Rechercher les lignes qui contiennent nos cat√©gories
            for ligne in lignes:
                for categorie in categories:
                    # V√©rifier si la cat√©gorie est pr√©sente dans la ligne
                    if categorie in ligne:
                        # Rechercher tous les nombres dans la ligne
                        nombres = re.findall(r'\b\d+(?:\.\d+)?\b', ligne)
                        print(f"Cat√©gorie: {categorie}, Nombres: {nombres}")
                        # Si nous avons trouv√© au moins 2 nombres (TAC et une autre valeur)
                        if len(nombres) >= 4:  # Format attendu: cat√©gorie, TAC, NET, %, P.M.
                            # Le premier nombre est g√©n√©ralement TAC, le dernier est P.M.
                            tac = nombres[0]
                            pm = nombres[3]
                            
                            # V√©rifier si la valeur TAC est plausible (pas trop grande)
                            if categorie not in resultats:
                                resultats[categorie] = {}
                            
                            resultats[categorie]['TAC'] = tac
                            resultats[categorie]['P.M.'] = pm
    
    # Validation des r√©sultats
    for categorie in categories:
        if categorie in resultats:
            # V√©rifier que les valeurs obtenues sont plausibles
            tac = resultats[categorie].get('TAC', '')
            pm = resultats[categorie].get('P.M.', '')
            
            # Si la valeur P.M. semble trop grande, c'est probablement une erreur
            if pm and float(pm.replace(',', '.')) > 100:
                # Essayer de prendre une autre valeur num√©rique de la ligne
                if len(resultats[categorie]) >= 4:
                    print(f"Correction de la valeur P.M. pour {categorie}")
                    print(f"Ancienne valeur: {pm}")
                    print(f"Valeurs alternatives: {resultats[categorie].values()}")
                    resultats[categorie]['P.M.'] = sorted([float(n) for n in resultats[categorie].values() if is_number(n)])[1]
                else:
                    # Valeur par d√©faut si on ne peut pas corriger
                    resultats[categorie]['P.M.'] = "N/A"
    
    return resultats

def is_number(s):
    """V√©rifie si une cha√Æne peut √™tre convertie en nombre"""
    try:
        float(s.replace(',', '.'))
        return True
    except (ValueError, AttributeError):
        return False

def extraire_par_detection_colonnes(chemin_pdf):
    """
    Analyse le PDF pour d√©tecter automatiquement les colonnes et extraire 
    les donn√©es de mani√®re plus pr√©cise.
    """
    categories = [
        "Sur place", 
        "A emporter", 
        "McDrive", 
        "TOTAL",
        "McCaf√© sur place",
        "McCaf√© √† emporter",
        "TOTAL McCaf√©",
        "Kiosk sur place", 
        "Kiosk √† emporter", 
        "TOTAL Kiosk",
        "TOTAL",
    ]
    
    resultats = {}
    
    with pdfplumber.open(chemin_pdf) as pdf:
        for page in pdf.pages:
            # Extraire tous les caract√®res avec leurs positions
            chars = page.chars
            
            # D√©terminer la largeur de la page
            page_width = page.width
            
            # D√©terminer les positions approximatives des colonnes
            tac_position = page_width * 0.4  # Estimation: TAC est √† 40% de la largeur
            pm_position = page_width * 0.9   # Estimation: P.M. est √† 90% de la largeur
            
            # Regrouper les caract√®res par ligne
            lines = {}
            for char in chars:
                y = round(char['top'])
                if y not in lines:
                    lines[y] = []
                lines[y].append(char)
            
            # Pour chaque ligne, chercher nos cat√©gories
            for y, line_chars in sorted(lines.items()):
                # Trier les caract√®res par position x
                line_chars.sort(key=lambda c: c['x0'])
                
                # Reconstruire le texte de la ligne
                line_text = ''.join(char['text'] for char in line_chars)
                
                for categorie in categories:
                    if categorie in line_text:
                        # Trouver les caract√®res num√©riques pr√®s des positions de colonnes
                        tac_value = extract_value_at_position(line_chars, tac_position)
                        pm_value = extract_value_at_position(line_chars, pm_position)
                        
                        if tac_value or pm_value:
                            if categorie not in resultats:
                                resultats[categorie] = {}
                                
                            if tac_value:
                                resultats[categorie]['TAC'] = tac_value
                            if pm_value:
                                resultats[categorie]['P.M.'] = pm_value
    
    return resultats

def extract_value_at_position(chars, position_x, tolerance=100):
    """
    Extrait une valeur num√©rique proche d'une position x donn√©e.
    """
    # Filtrer les caract√®res num√©riques pr√®s de la position
    nearby_chars = []
    current_number = []
    in_number = False
    
    # Trier les caract√®res par position x
    sorted_chars = sorted(chars, key=lambda c: c['x0'])
    
    for char in sorted_chars:
        # Si on est proche de la position cible
        if abs(char['x0'] - position_x) < tolerance:
            # Si c'est un chiffre ou un s√©parateur
            if char['text'].isdigit() or char['text'] in ['.', ',']:
                current_number.append(char)
                in_number = True
            elif in_number:
                # Fin d'un nombre
                if current_number:
                    nearby_chars.extend(current_number)
                    current_number = []
                in_number = False
    
    # Ajouter le dernier nombre si n√©cessaire
    if current_number:
        nearby_chars.extend(current_number)
    
    # Si on a trouv√© des caract√®res num√©riques
    if nearby_chars:
        # Regrouper les caract√®res qui sont align√©s horizontalement
        numbers = []
        current_group = []
        
        for i, char in enumerate(nearby_chars):
            if not current_group or abs(char['x0'] - current_group[-1]['x1']) < 5:
                current_group.append(char)
            else:
                numbers.append(''.join(c['text'] for c in current_group))
                current_group = [char]
        
        # Ajouter le dernier groupe
        if current_group:
            numbers.append(''.join(c['text'] for c in current_group))
        
        # Retourner la premi√®re valeur num√©rique compl√®te
        for num in numbers:
            if re.match(r'^\d+(?:[.,]\d+)?$', num):
                return num
    
    return None

# Fonction pour sauvegarder les r√©sultats dans un fichier CSV
def sauvegarder_resultats(resultats, nom_fichier="resultats_extraction.csv"):
    """
    Sauvegarde les r√©sultats dans un fichier CSV.
    """
    df = pd.DataFrame.from_dict(resultats, orient='index')
    df.index.name = 'Cat√©gorie'
    df.to_csv(nom_fichier)
    print(f"R√©sultats sauvegard√©s dans {nom_fichier}")

# Utilisation
if __name__ == "__main__":
    pdf_path = "sample.pdf"
    
    print("=== Extraction sp√©cialis√©e pour tableaux McDonald's ===")
    resultats1 = extraire_tableau_mcdo(pdf_path)
    print(resultats1)
    
    print("\n=== Approche par d√©tection de colonnes ===")
    resultats2 = extraire_par_detection_colonnes(pdf_path)
    print(resultats2)
    
    
    # Sauvegarder les r√©sultats
    sauvegarder_resultats(resultats1, "resultats_methode1.csv")
    sauvegarder_resultats(resultats2, "resultats_methode2.csv")
    
    
    # Si vous pr√©f√©rez utiliser les r√©sultats extraits (pour des donn√©es futures)
    # D√©commentez le code ci-dessous:
    
    resultats_fusionnes = {}
    
    # Fusionner les r√©sultats des deux m√©thodes
    for categorie in set(list(resultats1.keys()) + list(resultats2.keys())):
        resultats_fusionnes[categorie] = {}
        
        # TAC
        if categorie in resultats1 and 'TAC' in resultats1[categorie]:
            resultats_fusionnes[categorie]['TAC'] = resultats1[categorie]['TAC']
        elif categorie in resultats2 and 'TAC' in resultats2[categorie]:
            resultats_fusionnes[categorie]['TAC'] = resultats2[categorie]['TAC']
        
        # P.M.
        if categorie in resultats1 and 'P.M.' in resultats1[categorie]:
            resultats_fusionnes[categorie]['P.M.'] = resultats1[categorie]['P.M.']
        elif categorie in resultats2 and 'P.M.' in resultats2[categorie]:
            resultats_fusionnes[categorie]['P.M.'] = resultats2[categorie]['P.M.']
    
    
    print("\n=== R√©sultats finaux ===")
    print(resultats_fusionnes)
    sauvegarder_resultats(resultats_fusionnes, "resultats_finaux.csv")